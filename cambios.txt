P65PAS 0.7.8
============
Se corrige el bug #24 reportado en GitHub.
Se corrige el bug #25 reportado en GitHub.
Se pasa a usar la librería actualizada de P65Utils.
Se corrige un error en la detección de recursividad circular.

Pendientes
==========
- Describir mejor en la documentación, la forma en que se manejan las variables (registro, 
globales, locales) y los registros de trabajo.
- Impleemntar una pila de expresiones para facilitar el acceso a expresiones y poder evitar el
cao Expresion-Expresion.
- Analizar si conviene desaparecer demasiados métodos: valInt, valFloat, ..., de TOperand, 
e implementar esos accesos desde el gnerador de código, y que accedan a FConst.ValInt, ...
-Pasar a usar más variables auxiliares en lugar de registros. Debe existir un mecanismo confiable 
para que un procedimiento pueda pedir variables adicionales para cálculos intermedios. La idea es 
simplificar las operaciones de tipo expresión-expresión, usando variables adicionales.
- Implementar los casos expresión-expresión 
- Eliminar las referencias a "bank" y "bancos", en la documentación.

Generar bloques IF (o de otro tipo), de más de 128 bytes.

Revisar y adaptar los programas de prueba para el compilador.

Queda pendiente revisar la artimética de punteros a word. Ya que actualmente se 
implementan como aritmética simple de words, sin considerar el tipo de puntero, como se 
hace realmente en Pascal.

Una mejora en el diseño podría ser:
Revisar las llamadas "Funciones del sistema", ya que con el actual método de llamada a 
funciones del sistema, parecen innecesarios. Rutinas como inc() o dec() son realmente 
funciones INLINE, que pueden llamar, si lo deciden, a funciones del sistema.

Además pareciera que estas "funciones de sistema" están haciendo mal uso del campo "procCall"
ya que en todos los casos (salvo en estas llamadas "funciones del sistema") apuntan a la 
rutina "callFunctCall", que es la única que debería ser usada para verdaderas funciones.

Otra de las revisiones pendientes es ver el caso de las unidades cuando se referencian a ellas
desde dos módulos distintos. ¿Se duplican sus elementos en el arbol de sintaxis?

Queda pendiente también implementar la declaración de tipos en los parámetros de funciones.
De momento ya se ha creado la lista "internalTypes" en los elementos TxpEleType, para 
almacenar la lista de los posibles tipos creados.

Queda pendiente implementar las operaciones de tipo Expres + Expres, usando variables 
auxiliares.


Considerar implementar funciones INLINE. Las funciones INLINE se declaran de la sgte. forma:
inline func1(var x: byte; const y: word; expr z: char);
begin

end;

La idea es que las funciones INLINE puedan servir para compilar rutinas de bajo nivel 
considerando el tipo de almacenamiento del operando.
Son más parecidas a las macros que a las funciones. Se espera que en el futuro puedan 
codificar operaciones sobre tipos objeto:

octeto = object
    value: byte;
  public 
    inline assign(var x: byte) operator ":="  precedence 5;
    
    end;
    inline assign(x: byte) operator ":=";
    
    end;
  end;


P65PAS 0.7.7
============
Se cambia de nombre a TCompMain.CompileInstruction() por TCompMain.CompileSentence() para hacerlo
más consistente con la definición del lenguaje Pascal.
Se implementa la función addr() para que pueda obtener la dirección de procedimientos y funciones

P65PAS 0.7.6
============
Se pasa a usar la versión 0.3 de P65Utils, para solucionar un problema con la inicialización en 
la instrucción $SET_DATA_ADDR.
Se corige un error en la operación TGenCod.ROB_byte_and_byte().


P65PAS 0.7.5
============
- Se organiza y revisa la documentación técnica. Se eliminan algunas referencias a los tipos bit 
y se quitan también las referencias a registros auxiliares y de pila que ya no se usan en el 
compilador. También se actualiza la sección que describe a los registros. 

- Se cambia de nombre a TOperand.FValue por TOperand.FConst para hacerlo más consistente con 
la documentación.
- Se elimina el valor prtStkReg del enumerado TPicRegType, porque no se necesita manejar pila
personalizada.
- Se elimina el método TGenCodBas.GetAuxRegisterByte() porque no se usa. 
- Se elimina el método TGenCodBas.CreateRegisterByte() porque no se usa. 
- Se elimina TCompilerBase.ProplistRegAux, porque ya no se usa.
- Se elimina TCompilerBase.listRegAux, porque ya no se usa.
- Se eliminan el manejo de registros auxiliares y de pila dentro del compilador.
- Se elimina TGenCodBas.StartRegs().
- Se simplifica la clase TPicRegister porque ahora solo se usa para modelar a registros internos
de la CPU. Definiendo a los otros registros, como simples variables.
- Se elimina el tipo TPicRegType de la unidad XpresTypesPIC.
- Se elimina el tipo TPicRegister_list.
- Se pasa a manejar el tipo TPicRegister como "object" en lugar de clase.
- Se elimina TxpEleVar.adrByteTmp.
- Se reemplaza typWord.DefineRegister por el método AddCallerTo(H), que es más específico en el 
uso del registro.


P65PAS 0.7.4
===========
- Se define que las variables booleanas se cargen con el valor $02 para el valor TRUE y $00
para el valor FALSE, para facilidad de las operaciones.
- Se quita el parámetro "logic" para los métodos SetResultVariab(), SetROBResultVariab() y 
- SetROUResultVariab(), porque se está definiendo que esta bandera solo se aplique a expresiones. 
Se podría trabajar como PicPas y manejar "logic" también en variables, pero esto complicaría las 
RO, considerando que el 6502 no tiene instrucciones de acceso a bit, como si lo tienen los PIC.
- Se revisa y completa, un poco más, la documentación.
- Se corrige y optimiza TGenCod.ROB_bool_equal_bool().
- Se crea la rutina TGenCodBas.bool_LoadToRT() para corregir un error al compilar funciones.
- Se corrige un error con la lectura de parámetros, cuando se llamaba a métodos. 

Pendientes
==========
Encapsular los valores de constantes en un solo objeto de TOperand.

Generar bloques IF (o de otro tipo), de más de 128 bytes.

Revisar y adaptar los programas de prueba para el compilador.

Queda pendiente revisar la artimética de punteros a word. Ya que actualmente se 
implementan como aritmética simple de words, sin considerar el tipo de puntero, como se 
hace realmente en Pascal.

Una mejora en el diseño podría ser:
Revisar las llamadas "Funciones del sistema", ya que con el actual método de llamada a 
funciones del sistema, parecen innecesarios. Rutinas como inc() o dec() son realmente 
funciones INLINE, que pueden llamar, si lo deciden, a funciones del sistema.

Además pareciera que estas "funciones de sistema" están haciendo mal uso del campo "procCall"
ya que en todos los casos (salvo en estas llamadas "funciones del sistema") apuntan a la 
rutina "callFunctCall", que es la única que debería ser usada para verdaderas funciones.

Otra de las revisiones pendientes es ver el caso de las unidades cuando se referencian a ellas
desde dos módulos distintos. ¿Se duplican sus elementos en el arbol de sintaxis?

Queda pendiente también implementar la declaración de tipos en los parámetros de funciones.
De momento ya se ha creado la lista "internalTypes" en los elementos TxpEleType, para 
almacenar la lista de los posibles tipos creados.

Queda pendiente implementar las operaciones de tipo Expres + Expres, usando variables 
auxiliares.


Considerar implementar funciones INLINE. Las funciones INLINE se declaran de la sgte. forma:
inline func1(var x: byte; const y: word; expr z: char);
begin

end;

La idea es que las funciones INLINE puedan servir para compilar rutinas de bajo nivel 
considerando el tipo de almacenamiento del operando.
Son más parecidas a las macros que a las funciones. Se espera que en el futuro puedan 
codificar operaciones sobre tipos objeto:

octeto = object
    value: byte;
  public 
    inline assign(var x: byte) operator ":="  precedence 5;
    
    end;
    inline assign(x: byte) operator ":=";
    
    end;
  end;



P65PAS 0.7.3
===========
Se corrige, en la unidad ParserAsm_PIC16, el ensamblado de las instrucciones que hacen 
alusión a una etiqueta del bloque ensamblador.
Se corrige un problema relativo al uso de unidades dentro de unidades.


P65PAS 0.7.2
===========
Se corrige y mejora el Frame de registros para la ventana de depuración.
Se implementan nuevas instrucciones en el depurador/simulador, y se corrigen algunas 
funcionalidades.
Se revisan y completan nuevas operaciones con el tipo word (suma, autosuma, y and).
Se implementa el operador += para los punteros.
Se revisa la implementación de los métodos GetItem y SetItem de arreglos.
Se crea el método TGenCod.LoadIXmult() para ayudar en el cálculo de índices para arreglos 
o punteros.
Se completan las implementaciones de TGenCodBas.byte_LoadToRT() y TGenCodBas.word_LoadToRT() 
para más casos de almacenamiento.
Se implementa el operador ^ para punteros en modo "getter".
Se modulariza el método TGenCodBas.IF_TRUE().



P65PAS 0.7.1
==========
Se crea el tipo TOpReadMode y se incluye en las rutinas que manejan operandos.
Se cambia la forma de trabajo de TCompilerBase.GetExpressionE() para que ahora lea el 
primer operando con GetExpression() en lugar de GetOperand() y pueda procesar mejor las
asignaciones a punteros.
Se revisa y mejora la directiva $SET_STATE_RAM.
Se implementa la directiva $SET_DATA_ADDR y se activan los mecanismos para permitir la 
declaración de variables en zonas diferentes de la memoria.
Se elimina el registro H y se crea la variable del sistema H, para facilitar la 
administración de memoria y asignación.
Se eliminan, también, los registros E y U, de la misma forma que se hace con H.
Se crea el registro de índice IX.
Se implementa la operación de multiplicación de bytes y se revisan las operaciones de
suma.
Se implementa la optimización para reusar variables para parámetros.
Se revisan las operaciones de desplazamientos.
Se corrigen las búsquedas de elementos con FindNext() en TCompilerBase.GetOperandIdent().
Se corrige las búsquedas con TXpTreeElements.FindNextFuncName().


P65PAS 0.7
==========
Se mueven dos rutinas más de Compiler_PIC16 a CompMain.
Se modifica TGenCodBas.FunctCall() para gaurdar las llamadas pendientes.
Se modifica TxpElement.UpdateCalledAll() para detectar llamadas recursivas.
Se modifica CompileLinkProgram()-UpdateFunLstCalled() para protegerse de llamadas recursivas.
Se crean las rutinas necesarias para crear funciones del sistema en la unidad system y así 
puedan uniformizarse con las otras funciones y usar los mecanismos de optimización.
Se modifican las rutimas de exploración del arbol de sintaxis, de la unidad XpresElementsPIC
para implementar la búsqueda de Tipos en el árbol de sintaxis.
Se modifica GetTypeDeclar() para que evite crear tipos nuevos de arreglos cuando ya existe
un tipo equivalente.
Se elimina el typo String y se implementa la lectura de literales cadena como arreglos de
caracteres.
Se reescribe y mejora la rutina CreateVarInRAM(). Además se elimina AssignRAMinByte(). 
Se mejora la rutina TxpEleType.IsArrayOf() y se crea TxpEleType.IsPointerTo(), para detectar
equivalencias de tipos.
Se impleementa la asiganción de arrays de arrays:
  x: arrplus = [[1,2,3],[1,2,3],[4,5,6]]; 
Se eliminan los campos TxpEleVar.adrByte0, TxpEleVar.adrByte3, ... y sus objetos asociados 
para pasar a usar solo las direcciones físicas como números.
Se eliminan todas las referencias a las direcciones de tipo "offset", porque no tienen
sentido en la arquitectura del 6502.
Se hace una implementación básica del tipo "object" solo con soporte de atributos.
Se habilita la compilación en tiempo real, como una opción de la IDE.
Se mueve la rutina UpdateFunLstCalled() de Compiler_PIC16 a CompMain.

P65PAS 0.6
==========
Se continuan moviendo métodos de la unidad Compiler_PIC16 a la unidad CompMain.
Se cambia el método de creación de las funciones cuando se usan en INTERFACE y se 
implementa la opción de FORWARD. Ahora se crea un elemento nuevo que representa solo 
a la declaración y se cambia las rutinas de llamadas para la nueva gestión.
Se implementa la asignación de arreglos.
Se implementa asignación a nuevos tipos de almacenamiento para el tipo byte.
Se modifica el método TCompilerBase.GetExpressionE() para permitir operadores de tipo
+= y -=.
Se crea el almacenamiento stNull, para procedimientos que no devuelven valor.
Se implementan parcialmente las ROB para += y -= para el tipo Word.


P65PAS 0.5
==========
Se modifica TCompilerBase.GetExpressionE() para darle otro enfoque y permitir procesar las
asignaciones como instrucciones especiales, además de prohibir ciertas expresiones como 
instrucciones.
Se convierte GetOperand() a procedimiento y se devuelve el operando por referencia.
Se elimina TCompilerBase.GetOperandPrec().
Se cambia la estructura de TAdicVarDec para que incluya la información adicional de
variables registro y se quita del código el uso de banderas adicionales.
Se crea TxpAdicDeclar y se amplía los tipos de variables registro para que consideren
los casos REGISTERA, REGISTERX, y REGISTERY.
Se incrementan los modos de almacenamiento para dar soporte a los parámetros REGISTER.
Se cambia la sintaxis para la declaración de los parámetros REGISTER. AHora se ponen en 
el mismo lugar de ABSOLUTE.
Se reordenan las rutinas que daban soporte a punteros y arreglos para que se ubiquen en la
unidad GenCod_PIC16, mediante el uso de refrencias a función, de modo que se separa mejor
la generación de código del "Parser".
Se uniformiza el nombre y la creación de tipos para que haya consistencia.
Se implementa la creación dinámica de tipos para arreglos y punteros.
Se implementa parcialmente la aritmética de punteros como operaciones con word.
Se implementa la inciailización de arrays con constantes, al momento de la declaración.
Se mueven los métodos GetTypeDeclar() y GetTypeDeclarSimple(), (y otros más ) de la unidad
COmpiler_PIC16 a la unidad Parser(), para ir moviendo el generador de código, a niveles más
altos de la estructura de clases (así se pueden crear más generadores de código reusando 
las clases más bajas, como se espera hacer en Picpas). la idea sería mover todos los métodos
de Compiler_PIC16 a Parser. 
Se crea la unidad CompOperands y se mueven las rutinas básicas del compilador.
Se cambia de nombre a la unidad Parser por CompBase.


P65PAS 0.4
==========
Se crea el elemento TxpEleInline, para dar soporte a las funciones INLINE.
Se agrega la rutina CLRSCR() a la unidad Commodore64;
Se corrige un errror en la rutina TCompiler_PIC16.CompileFOR() cuando se asignaba una variable
como valor inicial de la variable índice.
Se crea el método TCompiler_PIC16.AddConstant() y se usa.
Se crea el método: TCompiler_PIC16.AddFunction() y se usa en TCompiler_PIC16.CompileProcHeader().
Se cambia de nombre a TxpElement.DuplicateIn() por TxpElement.ExistsIn() y se le quita el
VIRTUAL.
Se cambia de nombre a TxpEleFun.DuplicateIn() por TxpEleFun.Duplicated() y se le quita los
parámetros.
Se elimina TCompilerBase.ValidateFunction() y se incluye su código directamente.
Se cambia el manejo del campo "name" de TxpElement, agregando el campo "uname" para acelerar
las búsquedas y se usa en todos los puntos donde se aplicaba un UpCAse().
Se elimina TxpTreeElements.ValidateCurElement().
Se renombra el archivo tra_Parser.pas a tra_Compiler.pas. 
Se crea el archivo tra_Parser.pas y se cambia el sistema de traducción de la unidad Parser.pas
al sistema que usan las demás unidades.
Se agregan traducciones a mensajes en Parser.pas
Se optimiza getListOfIdent().
Se modifica sustancialmente CompileProcHeader() para que separe la parte de la lectura de la
información de la función de la parte de la creación de la función.
Se crea el enumerado TxpEleLocation, para precisar mejor la ubicación de los elementos y pasa
a reemplazar a la bandera boolena InInterface en varios procedimientos.
Se modifica TCompilerBase.CaptureParams() para que use un arreglo TxpParFuncArray, como 
parámetro y así se simplifica TCompilerBase.GetOperandIdent().
Se mueven de TCompiler_PIC16.getListOfIdent(), getParamType(), y CreateFunctionParams() a la 
unidad Parser.pas
Se cambia de nombre a CompileProcHeader() por ReadProcHeader() y se restringe su función.
Se modifica TCompiler_PIC16.GetAdicVarDeclar() para que soporte valores iniciales para las
variables.
Se modifican TGenCodBas.AssignRAMinByte() y TGenCodBas.CreateVarInRAM() para que asigne
valores iniciales a la RAM reservada.
Se deja de usar la función TCompilerBase.getParamType() y se pasa a usar 
TCompiler_PIC16.GetTypeVarDeclar() con leves modificaciones.
Se amplía y mejora TCompiler_PIC16.GetTypeVarDeclar() para soportar declaración de arreglos
básica.
Se crea el tipo typString, sin funcionalidad, solo para inicialización de arreglos y se 
modifica TCompilerBase.GetOperand() para soportar literales de cadena.
Se potencia TCompiler_PIC16.GetTypeVarDeclar() para permitir la especifiación dede tipos
compuestos en la declaración de variables.
Se unifican y se amplían las rutinas de lectura de tipos en los métodos 
TCompiler_PIC16.GetTypeDeclar() y TCompiler_PIC16.GetTypeDeclarSimple().
Se implementa la asignación de memoria para arreglos simples.
Se aumneta la sintaxis del ensmablador 6502 integrado, para que soporte los operadores #< y
#>.
Se quitan los campos de acceso a bit, que quedan como rezago de PicPas.
Se implementa el acceso a items de arreglos para estructuras simples.


P65PAS 0.3
==========
Se redefinen los almacenamientos en el enumerado TStoOperand, en la unidad XpresTypesPIC, 
para hacerlos más consistentes con el documento "Modos de Almacenamiento de Operandos en 
Xpres" del framework Xpres.
Se cambia el nombre del valor enumerado "stVarRefVar" por "stVarRef"
Se cambia el nombre del valor enumerado "stVarRefExp" por "stExpRef"
Se agrega comentario al código BASIC generado en modo COmmodore64.
Se corrige TGenCodBas.byte_LoadToRT() para el caso de variables.
Se corrige el uso de instrucciones con direccionamiento acumulador en los bloques ASM.
Se implementan algunos casos de TGenCod.fun_Word()
Se corrige la codificación de la instrucción ADC. 
Se agregan envoltorios a funciones del Kernal y BASIC en las unidad Commodore64.
Se corrige el tipo que devuelve la expresión a>b, para algunos casos.
Se corrrige la asignación de constantes a valores booleanos.
Se implementan nuevas rutinas TGenCodBas.SetROU* para el tipo booleano.
Se corrigen las rutinas TGenCod.Copy_Z_to_A() y TGenCod.Copy_C_to_A().
Se corrige la rutina TGenCodBas.IF_TRUE(). 
Se convierten las banderas BooleanFromC y BooleanFromZ a integer.
Se revisa y corrige la implementación de TGenCod.ROB_byte_great_byte().
Se cambia el tipo de parámetro "Inverted" de las funciones de tipo TGenCodBas.SetROBResult*()
y se crea el enumerado TLogicType.
Se implementan instruCciones nuevas en la unidad GenCodBas_PIC16.
Se mejora TGenCodBas.IF_TRUE(), para que considere la optimización.

Se ha mejorado la implementación del tipo Booleano, agregando y revisando al operador
NOT. QUedaría pendiente implementar las operaciones AND y OR.
La documentación también refleja el avance, porque se ha estudiado y se ha definido mejor
los tipos de almacenamientos que se van a implementar en el compilador.
Se debe revisar la documentación y completarla también con los avances. Además quedan
todavía en la documentación, muchos rezagos de la documentación de PicPas.

Los otros tipos aún tienen que revisarse.
Se ha analizado considerablemente la posibilidad de permitir implementar herencia de tipos
básicos, como:
type MiByte = object(byte)
		procedure Add()
	      end;
Implementar esta funcionalidad en etapas tempranas daría la ventaja de que el lenguaje nacería 
ya con soporte básico a objetos.
Otra de las tareas pendientes es hacer que la creación de funciones de sistema sea igual 
que las funciones definidas por el usuario (incluyendo el uso de variables locales).
Pero este acercamiento, debe también darse del lado de las funciones definidas por el usuario. De 
modo que se permita especificar parámetros REGISTER, diferenciados. Se recomienda implementar las 
palabras resrevadas REGISTERA, REGISTERX, REGISTERY, REGISTERSP,...

Revisar las instrucciones "if not AcumStatInZ" porque están después de SetROBResult* y no tiene
sentido, porque siempre cambia AcumStatInZ.

Otra de las cuestiones "filosóficas" a resolver, es si el modo "logic = logInverted" tiene
realmente sentido cuando se aplica a variables, ya que en una interpretación, las variables
nunca deberían tener una lógica distinta a la estableciada para todo el sistema. Al parecer
la lógica invertida solo debería aplicarse a expresiones, pero es un tema de análisis.

P65PAS 0.2
==========
Se mejora el desarrollo del compilador, mejorando el análisis de los almacenamientos: stVarRefVar y stVarRefExp.
Se elimina las instrucciones _BTFSC y _BTFSS, que eran un remanente del compilador PicPas.